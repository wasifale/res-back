'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _requestPromise = require('request-promise');

var _requestPromise2 = _interopRequireDefault(_requestPromise);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const PRE_LIVE_API = 'https://test.api.promisepay.com';
const LIVE_API = 'https://api.promisepay.com';

let Requester = class Requester {
  constructor() {
    let config = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    this.config = config;
    const baseUrl = config.preLive === false ? LIVE_API : PRE_LIVE_API;
    this.log(`API endpoint: ${ baseUrl }`);
    this.client = _requestPromise2.default.defaults({
      baseUrl: baseUrl,
      auth: {
        user: config.userName,
        pass: config.token
      },
      headers: {
        Accept: 'application/json',
        Authorization: `basic ${ config.apiToken }`
      },
      resolveWithFullResponse: true
    });
  }

  request(uri, params) {
    let method = arguments.length <= 2 || arguments[2] === undefined ? 'GET' : arguments[2];

    return this.client(_extends({}, params, { uri: uri, method: method })).then(response => {
      const contentType = response.headers['content-type'];
      if (_lodash2.default.isString(response.body) && contentType !== null && contentType.match(/json/i)) {
        _lodash2.default.set(response, 'body', JSON.parse(response.body));
      }
      return response.body;
    });
  }

  post(uri, params) {
    this.log(`[POST] ${ uri } with params: ${ JSON.stringify(params) }`);
    const postParams = params ? { body: params, json: true } : {};
    return this.request(uri, postParams, 'POST');
  }

  get(uri, params) {
    this.log(`[GET] ${ uri } with params: ${ JSON.stringify(params) }`);
    const getParams = params ? { qs: params } : {};
    return this.request(uri, getParams);
  }

  patch(uri, params) {
    this.log(`[PATCH] ${ uri } with params: ${ JSON.stringify(params) }`);
    const postParams = params ? { body: params, json: true } : {};
    return this.request(uri, postParams, 'PATCH');
  }

  delete(uri) {
    this.log(`[DELETE] ${ uri }`);
    return this.request(uri, {}, 'DELETE');
  }

  log(message) {
    if (this.config.debug === true) {
      const formattedMessage = `ðŸ’° [PromisePay] ${ message }`;
      if (this.config.logger && _lodash2.default.isFunction(this.config.logger)) {
        this.config.logger(formattedMessage);
      } else {
        console.log(formattedMessage); // eslint-disable-line
      }
    }
  }
};
exports.default = Requester;